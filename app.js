require('dotenv').config();
const express = require('express');
const { Telegraf } = require('telegraf');
const { setInterval } = require('timers');
let fs = require('fs');
const path = require('node:path');
const http = require("http");

//const serviceAccount = require("./fb_config").fb_config;
const serviceAccount = require("./fb_config").fb_config;

const TOKEN = process.env.TG_TOKEN;
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(TOKEN)
const app = express();




setInterval(function() {
    http.get("http://telegrambotkidspace.uc.r.appspot.com/");
}, 300000);



const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue } = require('firebase-admin/firestore');

const { Markup } = require('telegraf');

let isSco4Talking = false;
let currentTaskID = '001';
const enterAnswer = 'üìå –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è';
const tasksArray = 
[{tskid: 1,
tskText:
'C—Ç–≤–æ—Ä—ñ—Ç—å 2 –∑–º—ñ–Ω–Ω—ñ. –û–¥–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–æ—é. –Ü–Ω—à–∞ - –±—É–ª–µ–≤—Å—å–∫–æ–≥–æ —Ç–∏–ø—É:'+
'—Å–ø–æ—á–∞—Ç–∫—É true, –ø–æ—Ç—ñ–º false. –í –∫–æ–Ω—Å–æ–ª—å (console.log) –≤–∏–≤–µ–¥—ñ—Ç—å —ó—Ö —Å—É–º—É.'+
'–ó—Ä–æ–±—ñ—Ç—å –≤–∏—Å–Ω–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö',
tskMark: 1},

{tskid: 2,
tskText:
'–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –± –º—ñ–Ω—è–ª–∞ –º—ñ—Å—Ü—è–º–∏ –¥–∞–Ω—ñ —É –¥–≤–æ—Ö –∑–º—ñ–Ω–Ω–∏—Ö.'+
 '–©–æ –º–∞—î—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ: —î –¥–≤—ñ –∑–º—ñ–Ω–Ω—ñ: a = \'first\' —Ç–∞ " b = \'second\''+
 '. –ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –¥—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–æ–±–æ—Ç–∏ –º–µ—Ç–æ–¥—É \'console.log( a + b )\''+
 '–º–∞—î –±—É—Ç–∏ \'secondfirst\'. –î—É–∂–µ –∫—Ä—É—Ç–æ, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–≤–µ–¥—É—Ç—å—Å—è —É –∫–æ–Ω—Å–æ–ª—å –∑ –ø—Ä–æ–±—ñ–ª–æ–º'+
'(\'second first\') (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é (a+b) –¥–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ —Ç—Ä—ñ—à–∫–∏ –∑–º—ñ–Ω–∏—Ç–∏).'+
'–î–æ–¥–∞–≤–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª –¥–æ –∑–º—ñ–Ω–Ω–æ—ó –Ω–µ–º–æ–∂–Ω–∞.',
tskMark: 3},

{tskid: 3,
tskText:
'–ó –ø–µ–≤–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –ø—Ä–æ–π—à–ª–æ 395 –¥–Ω—ñ–≤. –°–∫—ñ–ª—å–∫–∏ –ø–æ–≤–Ω–∏—Ö —Ç–∏–∂–Ω—ñ–≤ –ø—Ä–æ–π—à–ª–æ –∑ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É?'+
'\n–ü—Ä–∏–º—ñ—Ç–∫–∞: —Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ü—ñ–ª–æ–≥–æ'+
 '—á–∏—Å–ª–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑ –ª–µ–∫—Ü—ñ—ó (+, -, *, /, %, **)',
 tskMark: 5},

 {tskid: 4,
tskText:
'1. –ú–∏–∫–æ–ª–∞ –æ—Ç—Ä–∏–º–∞–≤ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É —É —Ä–æ–∑–º—ñ—Ä—ñ 10000–≥—Ä–Ω.\n' +
'2. –¶—å–æ–≥–æ –∂ –º—ñ—Å—è—Ü—è –π–æ–º—É –¥–∞–ª–∏ –ø—Ä–µ–º—ñ—é —É –≤–∏–≥–ª—è–¥—ñ 15% –≤—ñ–¥ –∑–∞—Ä–ø–ª–∞—Ç–∏.\n' +
'3. –ü–æ–¥–∞—Ç–∫–∏ —î –ø–æ–¥–∞—Ç–∫–∏. –°–ª—ñ–¥ –ø–ª–∞—Ç–∏—Ç–∏)) 10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ (–∑–∞—Ä–ø–ª–∞—Ç–∞+–ø—Ä–µ–º—ñ—è)'+
'–º–∏–∫–æ–ª–∞ –≤—ñ–¥–¥–∞–≤ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–¥–∞—Ç–∫—ñ–≤.\n' +
'4. –¢–∞–∫ —è–∫ –∑–∞—Ä–ø–ª–∞—Ç—É –æ—Ç—Ä–∏–º–∞–ª–∏ —ñ –∫–æ–ª–µ–≥–∏ –ú–∏–∫–æ–ª–∏, —Ç–æ –°–µ–º–µ–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ –ú–∏–∫–æ–ª—ñ –±–æ—Ä–≥ - 2700 –≥—Ä–Ω.\n' +
'5. –ü–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –æ–ø–∏–Ω–∏—Ç–∏—Å—å –≤–¥–æ–º–∞, –ú–∏–∫–æ–ª–∞ –∑–∞–π—à–æ–≤ –≤ –ê–¢–ë —ñ –≤–∏—Ç—Ä–∞—Ç–∏–≤ —Ç–∞–º 450 –≥—Ä–Ω.\n' +
'6. –ó–∞ —Å—ñ–º–µ–π–Ω–æ—é –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é, –≤—Å—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ –≥—Ä–æ—à—ñ –ú–∏–∫–æ–ª–∞ –¥—ñ–ª–∏—Ç—å –Ω–∞–≤–ø—ñ–ª –∑ –¥—Ä—É–∂–∏–Ω–æ—é.\n' +
'\n' +
'–°–∫—ñ–ª—å–∫–∏ –≥—Ä–æ—à–µ–π –∑–∞–ª–∏—à–∏–ª–æ—Å—å —É –ú–∏–∫–æ–ª–∏?\n' +
'\n' +

'–ü—Ä–∏–º—ñ—Ç–∫–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ +=, -=, *=, /=. –ö–æ–∂–Ω–∏–π –∫—Ä–æ–∫ –∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏',
tskMark: 4},

{tskid: 5,
tskText:
'–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –í—Å—ñ–º –ì–∞—Ä–Ω–∏—Ö –í–∏—Ö—ñ–¥–Ω–∏—Ö, –ô–æ!\n' +
'–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –± –≤–∏–≤–æ–¥–∏–ª–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Ü–µ —Ä–µ—á–µ–Ω–Ω—è'+
'—É –∑–≤–∏—á–Ω–æ–º—É –Ω–∞–º –≤–∏–≥–ª—è–¥—ñ "–í—Å—ñ–º –≥–∞—Ä–Ω–∏—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö, –π–æ!\"',
tskMark: 5},

{tskid: 6,
tskText:
'–Ñ –¥–≤—ñ —á–∏—Å–ª–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö: a —Ç–∞ b, –ø—Ä–∏—á–æ–º—É a –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î b.'+
'–ù–µ –ø–æ—Ä—ñ–≤–Ω—é—é—á–∏ –º—ñ–∂ —Å–æ–±–æ—é –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö a —Ç–∞ b, –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É,'+
'—è–∫–∞ –± –≤–∏–≤–æ–¥–∏–ª–∞ –≤ –∫–æ–Ω—Å–æ–ª—å \'true\', —è–∫—â–æ a > b —ñ \'false\', —è–∫—â–æ a < b. –£—Å–ø—ñ—Ö—ñ–≤!',
tskMark: 7},

{tskid: 7,
tskText:'–î–∞–Ω–æ —Ç—Ä–∏–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ N. –í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–∞–∫–æ–∂ —Ç—Ä–∏–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ,'+
'–æ—Ç—Ä–∏–º–∞–Ω–µ —à–ª—è—Ö–æ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞ N. –Ø–∫—â–æ –Ω–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–µ —á–∏—Å–ª–æ -'+
'–ø–∞—Ä–Ω–µ, –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä–æ–∫–æ—é –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ - \'–ß–∏—Å–ª–æ –ø–∞—Ä–Ω–µ\'.\n' +
'\n' +
'–ù–∞—Ä—Ä–∏–∫–ª–∞–¥:\n' +
'\n' +
'let N = 456;\n' +
'... //–≤–∞—à –∫–æ–¥\n' +
'\n' +
'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å: 654',
tskMark: 6},
]

const hints = [
    {hintsID: 1,
    hintsText: '–ù—É, —Ç—É—Ç –Ω–µ–º–æ —á–æ–≥–æ –ø–æ—è—Å–Ω—é–≤–∞—Ç–∏)) –ë–µ—Ä–∏ –π —Ä–æ–±–∏!'},

    {hintsID: 2,
    hintsText: '–°–ª—ñ–¥ –ø–∞–º\'—è—Ç–∞—Ç–∏, —â–æ –æ–¥–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–∏—à–µ' +
' –æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –û—á–µ–≤–∏–¥–Ω–æ, —â–æ–± "–ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏" –¥–∞–Ω—ñ –∑ –æ–¥–Ω—ñ—î—é –∑–º—ñ–Ω–Ω–æ—ó –≤ —ñ–Ω—à—É, '+
'–Ω–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —â–µ –æ–¥–Ω–∞, —Ç—Ä–µ—Ç—è –∑–º—ñ–Ω–Ω–∞'},

    {hintsID: 3,
    hintsText: '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ª–∏—à–æ–∫ –≤—ñ–¥ –¥—ñ–ª–µ–Ω–Ω—è, —Å–ª—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä \'%\'.' + '\n'+'\n'+
'–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '+ '\n'+'\n'+
'5 % 3 = 2'+ '\n'+'\n'+
'–î—ñ–π—Å–Ω–æ, 5 / 3 = 1 (2 –æ—Å—Ç.). –¶—é –æ—Å—Ç–∞—á—É (2) –º–∏ –π –æ—Ç—Ä–∏–º—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞  \'%\''+
'–Ø–∫ –∂–µ –Ω–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–ª—É —á–∞—Å—Ç–∏–Ω—É–≤—ñ–¥ –¥—ñ–ª–µ–Ω–Ω—è? –í—Å–µ –ø—Ä–æ—Å—Ç–æ! –ü–æ–∑–±—É—Ç–∏—Å—è –∑–∞–ª–∏—à–∫—É (–æ—Å—Ç–∞—á—ñ) —ñ –ø–æ–¥—ñ–ª–∏—Ç–∏.'+
'(5 - 2) / 3 = 1'},

    {hintsID: 4,
    hintsText: '–¶—è –∑–∞–¥–∞—á–∞ –¥–æ–≤–æ–ª—ñ –ø—Ä–æ—Å—Ç–∞. –•—Ç–æ –∑–≤–µ—Ä–Ω—É–≤ —É–≤–∞–≥—É –Ω–∞ –ø—Ä–∏–º—ñ—Ç–∫—É —ñ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç–∏'+
' –∑–∞ –º–µ–∂—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ +=, -+, *= —Ç–∞ /=, –ø—Ä–æ–ø–æ–Ω—É—é –ø—Ä–∏–≥–∞–¥–∞—Ç–∏, —â–æ 100% + 10% = 110%. –Ø–∫ –∑ —á–∏—Å–ª–∞ (100%)'+
' –æ—Ç—Ä–∏–º–∞—Ç–∏ 110%? –ü–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ 1.1! '},

{hintsID: 5,
    hintsText: '–©–æ–± —Ä–æ–∑–≤\'—è–∑–∞—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É, —Å–ª—ñ–¥ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≤ –≥–æ–ª–æ–≤—ñ –ø–æ–∫—Ä–æ–≤–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä—ñ—à–µ–Ω–Ω—è.'+ '\n'+'\n'+
    '–¢–∞–∫ —è–∫ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–Ω–∞, –º–∏ –∑—Ä–æ–±–∏–º–æ –∑ –Ω–µ—ó 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É slice.'+
    ' –ü–æ—Ç—ñ–º –ø–µ—Ä—à—É - —Ä–æ–±–∏–º–æ –≤–µ–ª–∏–∫–æ—é ( –º–µ—Ç–æ–¥ toUpperCase() ), –¥—Ä—É–≥—É - –º–∞–ª–µ–Ω—å–∫–æ—é ( –º–µ—Ç–æ–¥ toLowerCase() )'+
    ' (–º–∞—é—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ –ª—ñ—Ç–µ—Ä–∏ —Å—Ç—Ä–æ–∫–∏, –∑–≤—ñ—Å–Ω–æ =)). –ü—ñ—Å–ª—è –≤—Å—ñ—Ö —Ü–∏—Ö –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π –∑–∞–ª–∏—à–∏—Ç—å—Å—è –ø–æ—î–¥–Ω–∞—Ç–∏ 2 –Ω–æ–≤—ñ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É'+
    ' —ñ –≤—Å–µ! –°–ø—Ä–∞–≤—É –∑—Ä–æ–±–ª–µ–Ω–æ!'},

{hintsID: 6,
    hintsText: '–î—É–∂–µ –± –Ω–µ —Ö–æ—Ç—ñ–ª–æ—Å—å, —â–æ–± —Å–∞–º–µ —Ü—ñ—î—é –ø—ñ–¥–∫–∞–∑–æ—é –≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—å, –∞–ª–µ... –í–∂–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏))'+ '\n'+'\n'+
'–¢–∞–∫ —è–∫ –∑–∞ —É–º–æ–≤–∞–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ù–ï–ú–û–ñ–ù–ê –±—É–¥—å-—è–∫–∏–º —á–∏–Ω–æ–º –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –º—ñ–∂ —Å–æ–±–æ—é –∑–º—ñ–Ω–Ω—ñ a —Ç–∞ b, –æ—á–µ–≤–∏–¥–Ω–æ, —â–æ —Ä—ñ—à–µ–Ω–Ω—è '+
'–≤–∏–º–∞–≥–∞—î –≤—ñ–¥ –Ω–∞—Å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑ —Ü–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏ –ø–µ–≤–Ω—ñ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó...'+ '\n'+'\n'+
'–ê —Ç–µ–ø–µ—Ä –ø—ñ–¥–∫–∞–∑–∫–∞:'+ '\n'+'\n'+

'–ß–æ–º—É –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏–º–µ —Ä—ñ–∑–Ω–∏—Ü—è a-b, —è–∫—â–æ a=b?'+ '\n'+'\n'+
'–í—Å–µ, –¥–∞–ª—ñ —Å–∞–º—ñ))' },

{hintsID: 7,
    hintsText: '–ë—É–¥—å-—è–∫–µ –±–∞–≥–∞—Ç–æ–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ –º–æ–∂–Ω–∞ "—Ä–æ–∑—ñ–±—Ä–∞—Ç–∏" –Ω–∞ —Å–∫–ª–∞–¥–æ–≤—ñ. –©–æ –º–∞—î—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ?'+
'–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 745, –Ω–∞–º —Å–ª—ñ–¥ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–æ—Ç–µ–Ω –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ 100, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Å—è—Ç–∫—ñ–≤ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –Ω–∞ 10'+
', –¥–æ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å.'+ '\n'+'\n'+
'745 = 7*100 + 4*10 + 5'+ '\n'+'\n'+
'–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ö –∫–ª—è—Ç–∏—Ö —Å–æ—Ç–µ–Ω? –î–∏–≤–∏—Å—å –ó–∞–¥–∞—á—É 3. –í—Å–µ  –∂ —Ç–µ —Å–∞–º–µ! –Ñ —á–∏—Å–ª–æ, —Å–ª—ñ–¥ –∑–Ω–∞–π—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å'+
' –ø–æ–≤–Ω–∏—Ö –≤—Ö–æ–¥–∂–µ–Ω—å —á–∏—Å–ª–∞ 100. –ü–æ—Ç—ñ–º –ø—Ä–∞—Ü—é—î–º–æ —ñ–∑ –∑–∞–ª–∏—à–∫–æ–º - –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ—Å—è—Ç–∫–∏ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ.'+
'–ù—É –π –≤—Ä–µ—à—Ç—ñ-—Ä–µ—à—Ç –∑–ª—ñ–ø–ª—é—î–º–æ –≤—Å–µ —Ü–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ–≤–æ–¥–∏–º–æ "–∑–±—ñ—Ä–∫—É —á–∏—Å–ª–∞" —É –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ).'},
]

let summaryMark = 0;

/* tasksArray.forEach(el =>{
    summaryMark += el.tskMark;
}) */

//console.log(summaryMark);

//const express = require('express');

//console.log(serviceAccount);


initializeApp({
  credential: cert(serviceAccount)
});

const db = getFirestore();

async function returnScore() {
     const scoreRef = db.collection('users');
     const snapshot = await scoreRef.where('userName', '!=', false).get();
       if (snapshot.empty) {
       console.log('No matching documents.');
       return;
     }  
    
         return snapshot;
     }

     async function returnSumScore() {
        const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
        const userRef = db.collection('users').doc(name);
        const doc = await userRef.get();
        //const str = currentTaskID.toString();
        const myScore = doc.data();

        const scoreRef = db.collection('users');
        const snapshot = await scoreRef.where('hisAnswer', '!=', false).get();
          if (snapshot.empty) {
          console.log('No matching documents.');
          return;
        }  
       
            return snapshot;
        }


     async function returnTasks() {
        const scoreRef = db.collection('tasks');
        const snapshot = await scoreRef.where('taskID', '!=', false).get();
          if (snapshot.empty) {
          console.log('No matching documents.');
          return;
        }  
       
            return snapshot;
        }   
        
        async function returnHints() {
            const scoreRef = db.collection('hints');
            const snapshot = await scoreRef.where('hintID', '!=', false).get();
              if (snapshot.empty) {
              console.log('No matching documents.');
              return;
            }  
           
                return snapshot;
            } 

  
//returnScore();
console.log('The Beginning');

  // Create a query against the collection
  


  async function writeUserDataFS(userId, userName, isAnswer, answer, score) {
    
   /*  if (userName==='mrSco4'){
        throw new Error('my err msg');
    } */
    await db.collection('users').doc(userName).set({
        userId,
        userName,
        isAnswer,
        answer,
        score
      
      });
    }






  async function addAnswer(userName, data) {
    await db.collection('users').doc(userName).set(
        {
        "answer": data,
        }, { merge: true });
    
    }
/******************* */
   
async function addTask(taskID, taskText) {
     await db.collection('tasks').doc(taskID).set({
        taskID,
        taskText
       
       });
      isSco4Talking = false;
     }

function addAnswerToTask(userName, hisAnswer){
    set(ref(db, 'tasks/' + currentTaskID + '/' + userName), {
        userName,
        hisAnswer,
               
      });
    }



//const e = require('express');

//const dirName = 'C:\\Users\\stask\\My Drive\\KID space\\01\\';

/* const inl_KB = {
    reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'Edit Text',
              callback_data: 'edit'
            }
          ]
        ]
        }
    } */



    //–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainMenuKB =() => {
        return Markup.keyboard([
            ['–ú–æ—ó –±–∞–ª–∏', '–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å–Ω–∏–∫—ñ–≤'],
            ['–ó–∞–≤–¥–∞–Ω–Ω—è'],
            ['–ü—ñ–¥–∫–∞–∑–∫–∏ –¥–æ –∑–∞–≤–¥–∞–Ω—å'],
        ]).resize()
    }

    //–∫–Ω–æ–ø–∫–∞ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'
    const mainMenu =() => {
        return Markup.keyboard([
            ['–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
        ]).resize()
    }



    
    


    //–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ "–ó–∞–≤–¥–∞–Ω–Ω—è"
  async function  tasksKB(){


        let arrKB =[['–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']];
        const arrFromBase =  await returnTasks();
        let i =1;

        arrFromBase.forEach(el =>{
            
            arrKB.push(['–ó–∞–≤–¥–∞–Ω–Ω—è ' + (i)])
            i++;
            
        })

        return Markup.keyboard(arrKB).resize()
    }


    


    async function  hintsKB(){


        let arrKB =[['–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']];
        const arrFromBase =  await returnHints();
        //console.log(arrFromBase);
        let i =1;

        arrFromBase.forEach(el =>{
            
            arrKB.push(['–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–∞–≤–¥. ' + (i)])
            
            i++;
            
        })
        //console.log(arrKB)
        return Markup.keyboard(arrKB).resize()
       
        }

     //–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"
     const addTasksKB =() => {
        return Markup.keyboard([
            ['–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è'],
            ['–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
        ]).resize()
    }



bot.start(async ctx => {
    const appeal = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
    ctx.reply(`–í—ñ—Ç–∞—é —Ç–µ–±–µ, ${appeal}! –Ø KidSpaceBot - –±—É–¥—É –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ.`+'\n'+
'–ü–æ–∫–∏ —â–æ —è –≤–º—ñ—é –Ω–µ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ, –∞–ª–µ... –í—Å–µ –ø–æ–ø–µ—Ä–µ–¥—É üòâ'+'\n'+
'–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ç–∞ –¥–æ –Ω–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å!' ,mainMenuKB());
    console.log(ctx.message)
    const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
  

    const usersRef = db.collection('users').doc(name);

    usersRef.get()

      .then((docSnapshot)  => {
        if (!docSnapshot.exists) {
            writeUserDataFS(ctx.message.from.id, name, false, ' ', 0).catch(
                handleUnknownErr(ctx,'writeUserDataFS')
                );
        }
    });  
})

const getTask = async (ctx)  =>{
    let text = ctx.message.text;
    //let re = /–ó–∞222–≤–¥–∞–Ω–Ω—è [0-9]/;
    let resText = text.match(/–ó–∞–≤–¥–∞–Ω–Ω—è [0-9]/ );

    //m46atchAll = Array.from(matchAll);
    //console.log(matchAll[0].input);
        if(resText !== null){
            console.log(resText);
        let taskName ='';
        currentTaskID = +(text.split(' ')[1]);
        currentTaskID.toString().length<2?

        taskName = '0' + '0' + currentTaskID:
        taskName = '0' + currentTaskID;

        const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
        //await ctx.deleteMessage(ctx.message.message_id);
        console.log (name + ' –ü—Ä–æ—Å—è—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è ' +currentTaskID)

        const tasksRef = db.collection('tasks').doc(taskName);
        const doc2 = await tasksRef.get();
        const niceText = await doc2.data().taskText.replace( /Y/g, '\n');
        //const niceText = taskText.replace( /$/g, '\n');
       const taskMark = await doc2.data().taskMark;
//console.log(niceText);
        //const taskFromBase = currentTaskID-1;
        //const usersRef = db.collection('users').doc(name);
    
        const userRef = db.collection('users').doc(name);
            const doc = await userRef.get();
            //const str = currentTaskID.toString();
            const myScore = doc.data();
           // console.log(myScore);
    //console.log(myScore['1']);
    if (myScore.answer[currentTaskID]){
        let str = '';
        if (myScore.answer[currentTaskID].hisMark !== null){
            str = '‚úÖ –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ '+ myScore.answer[currentTaskID].hisMark+ ' –±–∞–ª—ñ–≤';
        }
        else{
            str = '‚òùÔ∏è –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ';
        }
        ctx.reply('–ó–∞–≤–¥–∞–Ω–Ω—è '+currentTaskID+'. ' +'\n'  +'\n'+
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: ' + taskMark +'\n'+ '\n'+niceText+'\n'+'\n'  +'\n'+ 'üü¢ –í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏'+'\n'  +'\n'+ str + '\n'  +'\n'+
        'üìå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'+'\n'  +'\n'+
        '–ê–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëáüëáüëá', mainMenu())
    }
    else{
    ctx.reply('–ó–∞–≤–¥–∞–Ω–Ω—è '+currentTaskID+'. '+'\n'  +'\n'+
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: ' + taskMark +'\n'+ '\n'+niceText+'\n'+'\n' + enterAnswer, mainMenu())
    }
    
        await db.collection("users").doc(name).update({
            "isAnswer": true,
        }).catch(
            (error)=>{
                console.error()
            }
        )
    }
        }  

    const getHint = async (ctx)  =>{
            let text = ctx.message.text;
            //let re = /–ó–∞–≤–¥–∞–Ω–Ω—è [0-9]/;
            let resText = text.match(/–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–∞–≤–¥. [0-9]/ );
            let hintName ='';
            //matchAll = Array.from(matchAll);
            //console.log(matchAll[0].input);
                if(resText !== null){
                    console.log(resText);
                
                let hintID = +(text.split(' ')[3]);
                hintID.toString().length<2?

        hintName = '0' + '0' + hintID:
        hintName = '0' + hintID;
        console.log(hintName);
                const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
                //await ctx.deleteMessage(ctx.message.message_id);
                console.log (name + ' –ü—Ä–æ—Å–∏—Ç—å –ø—ñ–¥–∫–∞–∑–∫—É ' +hintID)
                //const hintFromArrNum = hintID-1;
                //const usersRef = db.collection('users').doc(name);
            
           
                const hintsRef = db.collection('hints').doc(hintName);
                const doc2 = await hintsRef.get();
                const niceText = await doc2.data().hintText.replace( /Y/g, '\n');
                //const niceText = taskText.replace( /$/g, '\n');
              // const taskMark = await doc2.data().taskMark;
        //console.log(niceText);
                //const taskFromBase = currentTaskID-1;
                //const usersRef = db.collection('users').doc(name);
                
                
                ctx.reply('–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è '+ hintID+ '\n' + '\n' + niceText, mainMenu())

            }
        }

function handleUnknownErr(ctx,errorID=''){
return function(error){
    //console.error(error);
    console.log(errorID, error);
    ctx.reply('–£—É–ø—Å. –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
}
}

bot.hears('–ü—ñ–¥–∫–∞–∑–∫–∏ –¥–æ –∑–∞–≤–¥–∞–Ω—å', async ctx => {
    await ctx.deleteMessage(ctx.message.message_id);
    ctx.reply('–í—ñ–¥–∫—Ä–∏–≤–∞—é –ø—ñ–¥–∫–∞–∑–∫–∏...',await hintsKB());

 
})


bot.hears('–ó–∞–≤–¥–∞–Ω–Ω—è', async ctx => {
    await ctx.deleteMessage(ctx.message.message_id);
    ctx.reply('–í—ñ–¥–∫—Ä–∏–≤–∞—é –∑–∞–≤–¥–∞–Ω–Ω—è...',await tasksKB());

 
})

bot.hears('1722', ctx => {
    if(ctx.message.from.id === 370562012) {
        const text = ctx.message.text;
        ctx.reply('–î–æ–¥–∞–π, –±—Ä–æ!',addTasksKB());;
        console.log('1722, Sco4 is talking');
        console.log(isSco4Talking);
        
    }
})

    bot.hears('–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', ctx => {
        if(ctx.message.from.id === 370562012) {
            isSco4Talking = true;
            ctx.reply('–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ ‚Ññ‚Ññ‚Ññ–ó–∞–≤–¥–∞–Ω–Ω—è–•');
            console.log('Sco4 is talking');
            console.log(isSco4Talking);
            
        }


})


bot.hears('–ú–æ—ó –±–∞–ª–∏', async ctx => {
    await ctx.deleteMessage(ctx.message.message_id);
    const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
    summaryMark =0;
    let tasksNum =0;

    //let myArr =[];
    const arrFromBase = await returnTasks(); 
    
    arrFromBase.forEach(el =>{
        summaryMark += +el.data().taskMark
        tasksNum++;
    })

    
    const userRef = db.collection('users').doc(name);
        const doc = await userRef.get();
        let myScore = 0;
        let answNum = 0;
        const answers = await doc.data().answer;
        console.log(answers);
        for (var key in answers) {
            myScore += answers[key].hisMark;
            answNum++;
          }

          //console.log(hisScore)
        //const myScore = await doc.data().score;
        
    console.log(name + ' –∑–∞–ø—Ä–æ—Å–∏–≤ –±–∞–ª–∏');

    ctx.reply('üß† –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ú–û–ñ–õ–ò–í–ê –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –ë–ê–õ–Ü–í: ' + summaryMark+ '\n'+'\n'
    +'‚úî ' +name + ', —É –í–∞—Å '+ myScore + ' –±–∞–ª—ñ–≤.'+'\n'+'\n'
    +'‚û° –†–æ–∑–≤\'—è–∑–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: ' +answNum + ' –∑ ' + tasksNum);

})

const readScore = (array,ctx) =>{
    let i = 1;
    let results = '';
    array.forEach(el =>{
      if(el.name === ctx.message.from.username || el.name === ctx.message.from.first_name){
        results += 'üòâ' + i++ + '. ' + el.name + ': ' + el.score +'\n';
      }
      else{
        results += i++ + '. ' + el.name + ': ' + el.score +'\n';
      }
        
})
return results;
}

bot.hears('–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å–Ω–∏–∫—ñ–≤', async ctx => {
    await ctx.deleteMessage(ctx.message.message_id);
    //const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
        let myArr =[];
        const arrFromBase = await returnScore(); 
        
        arrFromBase.forEach(el =>{
            myArr.push({name: el.id, score: el.data().score})
            
        })

        
        myArr = myArr.sort((a, b) => a.score > b.score ? -1 : 1);
        console.log(myArr);
        ctx.reply(readScore(myArr,ctx));

    })

bot.hears('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', async ctx => {
    const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
    await ctx.deleteMessage(ctx.message.message_id);
    ctx.reply('–í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...',mainMenuKB());

    db.collection("users").doc(name).update({
        "isAnswer": false,
    });
  
})

bot.on('text',async ctx => {
        const text = ctx.message.text;
        const name = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
        

        const userRef = db.collection('users').doc(name);
        const doc = await userRef.get();
        const isMainAnswer = await doc.data().isAnswer;

        
    //let re = /–ó–∞222–≤–¥–∞–Ω–Ω—è [0-9]/;
    let textTask = text.match(/–ó–∞–≤–¥–∞–Ω–Ω—è [0-9]/ );
    let textHint = text.match(/–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–∞–≤–¥. [0-9]/ );
    //m46atchAll = Array.from(matchAll);
    //console.log(matchAll[0].input);
        if(textTask !== null){
          getTask(ctx);
        } else{
            if(textHint !== null){
                getHint(ctx);
             }
        
        else{

        
        
        
       // await getHint(ctx);

        if((ctx.message.from.id === 370562012) && isSco4Talking){

            const taskID = text.slice(0,3);
            const taskText = text.slice(4);
            console.log(isSco4Talking);
            console.log(taskID, taskText);
           
            addTask(taskID,taskText).catch(
                handleUnknownErr(ctx,'addTaskToBase')
                
                );
            
        }
    
        if (isMainAnswer){
            
            console.log(`–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${text}`);
            ctx.reply('–í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ø–∏—Å–∞–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ;-)');
            ctx.reply(`–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: ${text}`);
            ctx.reply('–í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...',mainMenuKB());
            const data = {         
                
                [currentTaskID]:
                {hisAnswer: text,
                hisMark: null
                },
                
            }

            addAnswer(name,data);
            
            db.collection("users").doc(name).update({
                "isAnswer": false,
            });
       
        }
          
    /********************************************* */
    else{
    
    const appeal = ctx.message.from.username? ctx.message.from.username: ctx.message.from.first_name;
    
    //ctx.reply(`${appeal} —Å–∫–∞–∑–∞–≤ ${text}`);
    await ctx.deleteMessage(ctx.message.message_id);
    console.log(`${appeal} —Å–∫–∞–∑–∞–≤ ${text}`)
   // let text = ctx.message.text;
            //let re = /–ó–∞–≤–¥–∞–Ω–Ω—è [0-9]/;
            let resText = text.match(/–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–æ –∑–∞–≤–¥. [0-9]/ );
            if(resText == null){
    ctx.reply('–í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...',mainMenuKB());
            }
        }
        /************************************ */
        }}
    })


bot.on('voice', ctx => {
    ctx.reply('–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç–∞–∫–∏–π –≥–æ–ª–æ—Å')
})

bot.launch();

app.listen(PORT, () => console.log(`My server is running on port ${PORT}`))